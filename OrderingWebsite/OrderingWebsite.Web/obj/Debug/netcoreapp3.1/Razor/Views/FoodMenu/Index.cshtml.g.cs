#pragma checksum "/Users/k/Documents/ASP.NET_CORE/OrderingWebsite/OrderingWebsite.Web/Views/FoodMenu/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d67ae4889c017fe188af71ab28d4767828bed6d6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_FoodMenu_Index), @"mvc.1.0.view", @"/Views/FoodMenu/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d67ae4889c017fe188af71ab28d4767828bed6d6", @"/Views/FoodMenu/Index.cshtml")]
    public class Views_FoodMenu_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<script type=""text/template"" id=""foodMenuList"">
    <div>
        <div>
            <el-button type=""primary"">添加菜品</el-button>
            <el-button type=""success"">编辑菜品</el-button>
            <el-button type=""danger"">删除菜品</el-button>
        </div>
        <el-table :data=""tableData""
                  style=""width: 100%"">
            <el-table-column prop=""imgUrl"" width=""120""
                             label=""图样"">
                <template slot-scope=""scope"">
                    <img :src=""scope.row.imgUrl"" min-width=""100"" height=""100"" />
                </template>
            </el-table-column>
            <el-table-column prop=""name""
                             label=""菜名"">
            </el-table-column>
            <el-table-column prop=""description""
                             label=""简介"">
            </el-table-column>
            <el-table-column prop=""stockCount"" width=""100""
                             label=""库存"">
            </el-table-column>
            <el-table-column");
            WriteLiteral(@" prop=""type"" width=""100""
                             label=""类别"">
            </el-table-column>
            <el-table-column prop=""price"" width=""100"" :formatter=""format""
                             label=""价格"">
            </el-table-column>
        </el-table>
    </div>
</script>

<script type=""text/javascript"">var foodMenu = {
        template: '#foodMenuList',
        data() {
            return {
                saveUrl: ""/Food/UploadImg"",
                    tableData: [],

                    pagerOpt: {
                    pageSize: 2,
                    page: 1,
                    total: 0,
                },

                model: {
                    Name: """",
                    Description: """",
                    Price: 0,
                    StockCount: 0,
                    Type: """",
                    ImgUrl: """"
                },

                editType: ""添加"",
                    backup: """"
            }
        },
        mounted() {
           ");
            WriteLiteral(@" this.getData();
        },
        methods: {
            getData() {
                var params = `pageNo=${this.pagerOpt.page}&pageSize=${this.pagerOpt.pageSize}`
                _fetch(""/FoodMenu/GetFoodMenus?"" + params, ""GET"").then(res => {
                    if (res.status = ""Success"") {

                        res.data.filter(x => {
                            x.checked = false;
                            x.isEdit = false;
                        });
                        this.tableData = res.data;
                        this.pagerOpt.total = res.total;
                    }
                    else {
                        alert(""系统出错了！"");
                    }
                });
            },

            addFood() {
                this.editType = ""添加"";
                this.$refs.addWin.show();
            },

            format(row, column) {
                var val = row.price.toFixed(2);

                return `￥${val}元`;
            },

            dateF");
            WriteLiteral(@"ormatter (row, column) {
                let datetime = row.time;
                if(datetime){
                    datetime = new Date(datetime);
                    let y = datetime.getFullYear() + '-';
                    let mon = datetime.getMonth()+1 + '-';
                    let d = datetime.getDate();
                    return y + mon + d;
                }
                return ''
            },

            closeWin() {
                this.model = {
                    Name: """",
                    Description: """",
                    Price: """",
                    StockCount: """",
                    Type: """",
                    ImgUrl: """"
                };

                this.$refs.addWin.close();
            },

            submitFood() {
                if (!this.model.Name || !this.model.Description || !this.model.Price
                    || !this.model.StockCount || !this.model.Type || !this.model.ImgUrl) {
                    alert(""请完成下面所有信息！"")
          ");
            WriteLiteral(@"          return;
                }

                var model = $.extend(true, {}, this.model);
                var data = {
                    Name: model.Name,
                    Description: model.Description,
                    ImgUrl: model.ImgUrl,
                    Type: model.Type,
                    Price: parseFloat(model.Price),
                    StockCount: parseFloat(model.StockCount),
                }

                _fetch(""/Food/AddFood"", ""POST"", data).then(res => {
                    if (res.status = ""Success"") {
                        alert(""添加成功！"");
                        this.getData();
                    }
                    else {
                        alert(""系统出错了！"");
                    }
                });
            },

            afterUploaded(res) {
                if (res.success == true) {
                    this.model.ImgUrl = res.fileName;
                }
                else {
                    alert(""系统出错，请重试！"");
        ");
            WriteLiteral(@"        }
            },

            editOrder() {
                var ids = [];
                this.tableData.filter(v => {
                    if (v.checked) {
                        ids.push(v.id);
                    }
                });

                if (ids.length == 0 || ids.length > 1) {
                    alert('请先选择一份菜品');
                    return;
                }

                var item = this.tableData.find(x => x.id == ids[0]);
                item.isEdit = true;
                this.backup = item.status;
            },

            cancelOrder(item) {
                item.isEdit = false;
                item.status = this.backup;
            },

            saveOrder(item) {
                var parms = `id=${item.id}&status=${item.status}`
                _fetch(""/Order/Save?"" + parms, ""Post"").then(res => {
                    if (res.status = ""Success"") {
                        this.getData();
                    }
                    else {
     ");
            WriteLiteral(@"                   alert(""系统出错了！"");
                    }
                });
            },

            deleteOrder() {
                var ids = [];
                this.tableData.forEach(function (v) {
                    if (v.checked) {
                        ids.push(v.id);
                    }
                });
                if (ids.length == 0) {
                    alert('请先选择一份菜品');
                    return;
                }

                alert(""删除成功！"");
            },

            pageChange() {
                this.getData();
            }
        }
    };</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
